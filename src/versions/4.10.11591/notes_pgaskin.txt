pgaskin's notes about updating the patches
- asm instructions are kinda backwards (12 34 AB CD -> 32 12 CD AB), objdump shows it the backwards way
- http://armconverter.com/hextoarm/ is useful
- objdump -S libwhatever | c++filt | grep -C10 "whatever"
- to update, find code around offset, look for what is unique, find in new version, update offsets
- hopper is useful for more complex patches, especially ones with a lot of int/float replacements (split the view between pseudocode, asm, and hex)

libadobe.so:
    Patch: remove map widget
    Context:
        00032d9c <N3AdobeReader::showMapWidget()@@Base>:
           32d9c:	b598      	push	{r3, r4, r7, lr}
           32d9e:	af00      	add	r7, sp, #0
           32da0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
    Grep: N3AdobeReader::showMapWidget()@@Base
    Update: offset 0x032DEA -> 0x32D9E

librmsdk.so.1.0.0:
    Patch: disable orphans widows avoidance
    Context:
      295dc0:	ed9f 0a0b 	vldreq	s0, [pc, #44]	; 295df0 <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x64>
      295dc4:	ee87 0a00 	vdivne.f32	s0, s14, s0
      295dc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
      295dcc:	46bd      	mov	sp, r7
      295dce:	bc90      	pop	{r4, r7}
      295dd0:	4770      	bx	lr
      295dd2:	eddf 7a07 	vldr	s15, [pc, #28]	; 295df0 <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x64>
      295dd6:	ee30 0a67 	vsub.f32	s0, s0, s15
      295dda:	2a00      	cmp	r2, #0
      295ddc:	d0e6      	beq.n	295dac <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x20>
      295dde:	eddf 7a04 	vldr	s15, [pc, #16]	; 295df0 <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x64>
      295de2:	e7e5      	b.n	295db0 <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x24>
      295de4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 295df4 <layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x68>
    Grep: layout::FlowProcessor::getPageBreakScore(bool, bool, bool, bool, float)@@Base+0x20
    Update: offset 0x295DDC -> 0x295DDC

libnickel.so.1.0.0:
    Patch: always show chapter name
    Context:
      9f4270:	4b74      	ldr	r3, [pc, #464]	; (9f4444 <ReadingMenuScrubberController::setChapterAndProgressText(QString const&, QString const&)@@Base+0x2f4>)
      9f4272:	4640      	mov	r0, r8
      9f4274:	58ee      	ldr	r6, [r5, r3]
      9f4276:	f106 0308 	add.w	r3, r6, #8
      9f427a:	613b      	str	r3, [r7, #16]
      9f427c:	f61f e00a 	blx	413294 <ReadingSettings::getBookProgressType()@plt>
      9f4280:	f624 e214 	blx	4186ac <progressTypeIsBookBased(BookProgressType)@plt>
      9f4284:	f080 0101 	eor.w	r1, r0, #1
      9f4288:	f106 0308 	add.w	r3, r6, #8
      9f428c:	4640      	mov	r0, r8
      9f428e:	b2ce      	uxtb	r6, r1
    About: replace function call progressTypeIsBookBased with 'MOVS R0, #0' (0020) twice
    Grep: ReadingMenuScrubberController::setChapterAndProgressText(QString const&, QString const&)@@Base+0x2f4>
    Update: offset 0x9F00D4 -> 0x9F4280
    Update: replace 26 F6 48 E4 -> 24 F6 14 E2
    
    Patch: clock display
    Context:
      9dab32:	f641 e00c 	blx	41bb4c <MainWindowController::statusBarController() const@plt>
      9dab36:	2201      	movs	r2, #1
      9dab38:	4641      	mov	r1, r8
      9dab3a:	f627 e2ac 	blx	402094 <StatusBarController::setStatusMessage(QString const&, bool)@plt+0x4>
      9dab3e:	f640 31b8 	movw	r1, #3000	; 0xbb8
      9dab42:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
      9dab46:	f648 e6f0 	blx	423928 <PowerTimer::fireIn(int)@plt+0x4>
      9dab4a:	f63f e13c 	blx	419dc4 <MainWindowController::sharedInstance()@plt>
    About: replace word (MOVW r1, #3000) in register 1 for function PowerTimer::fireIn
    Grep: StatusBarController::setStatusMessage(QString const&, bool)@plt+0x4
    Update: offset 0x9D677A -> 0x9DAB3E
    
    Patch: keyboard stuff
    Context:
      8f6cc6:	4630      	mov	r0, r6
      8f6cc8:	4639      	mov	r1, r7
      8f6cca:	f70b e138 	blx	401f3c <operator==(QString const&, QString const&)@plt+0x4>
      8f6cce:	b1d0      	cbz	r0, 8f6d06 <SearchKeyboardController::canShowUpperCase(VirtualKey*) const@@Base+0x5e>
      8f6cd0:	2400      	movs	r4, #0
      8f6cd2:	6838      	ldr	r0, [r7, #0]
      8f6cd4:	6803      	ldr	r3, [r0, #0]
      8f6cd6:	b93b      	cbnz	r3, 8f6ce8 <SearchKeyboardController::canShowUpperCase(VirtualKey*) const@@Base+0x40>
      8f6cd8:	2204      	movs	r2, #4
      8f6cda:	2102      	movs	r1, #2
      8f6cdc:	f714 e2e6 	blx	40b2ac <QArrayData::deallocate(QArrayData*, unsigned int, unsigned int)@plt+0x4>
      8f6ce0:	4620      	mov	r0, r4
      8f6ce2:	370c      	adds	r7, #12
      8f6ce4:	46bd      	mov	sp, r7
      8f6ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    About: enable uppercase, change false (movs r4, #0) in r4 to true
    Grep: SearchKeyboardController::canShowUpperCase(VirtualKey*) const@@Base+0x40
    Update: offset 0x8f3ab0 -> 0x8f6cd0
    
    The other patches were more complicated, but I basically compared the two versions, updated registers (if needed), and updated function offsets for blx (making sure to use the right @PLT)